/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.4). */

/* Lexer definition for use with FLex */

%option noyywrap noinput nounput
%option reentrant bison-bridge bison-locations

%{
#include "Absyn.H"
#include "Bison.H"

#define initialize_lexer wosm__initialize_lexer

static void update_loc(YYLTYPE* loc, char* text)
{
  loc->first_line = loc->last_line;
  loc->first_column = loc->last_column;
  int i = 0;
  for (; text[i] != '\0'; ++i) {
      if (text[i] == '\n') {
          ++loc->last_line;
          loc->last_column = 0;
      } else {
          ++loc->last_column;
      }
  }
}
#define YY_USER_ACTION update_loc(yylloc, yytext);

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START CHAR CHARESC CHAREND STRING ESCAPED COMMENT

%%  /* Rules. */

<INITIAL>".wosm;"      	 return _SYMB_0;
<INITIAL>"var{"      	 return _SYMB_1;
<INITIAL>"}"      	 return _RBRACE;
<INITIAL>"="      	 return _EQ;
<INITIAL>"["      	 return _LBRACK;
<INITIAL>"]"      	 return _RBRACK;
<INITIAL>"]="      	 return _SYMB_6;
<INITIAL>";"      	 return _SEMI;
<INITIAL>"*"      	 return _STAR;
<INITIAL>"const{"      	 return _SYMB_9;
<INITIAL>"function{"      	 return _SYMB_10;
<INITIAL>"()"      	 return _SYMB_11;
<INITIAL>"("      	 return _LPAREN;
<INITIAL>")"      	 return _RPAREN;
<INITIAL>","      	 return _COMMA;
<INITIAL>"if("      	 return _SYMB_15;
<INITIAL>"){"      	 return _SYMB_16;
<INITIAL>"else{"      	 return _SYMB_17;
<INITIAL>"while("      	 return _SYMB_18;
<INITIAL>"for("      	 return _SYMB_19;
<INITIAL>"<"      	 return _LT;
<INITIAL>"<="      	 return _LDARROW;
<INITIAL>"=="      	 return _DEQ;
<INITIAL>"!="      	 return _BANGEQ;
<INITIAL>">="      	 return _GTEQ;
<INITIAL>">"      	 return _GT;
<INITIAL>"&&"      	 return _DAMP;
<INITIAL>"||"      	 return _DBAR;
<INITIAL>"+"      	 return _PLUS;
<INITIAL>"-"      	 return _MINUS;
<INITIAL>"/"      	 return _SLASH;
<INITIAL>"begin"      	 return _KW_begin;
<INITIAL>"char"      	 return _KW_char;
<INITIAL>"double"      	 return _KW_double;
<INITIAL>"end"      	 return _KW_end;
<INITIAL>"goto"      	 return _KW_goto;
<INITIAL>"int"      	 return _KW_int;
<INITIAL>"program"      	 return _KW_program;
<INITIAL>"void"      	 return _KW_void;

<INITIAL>"#"[^\n]* /* skip */; /* BNFC: comment "#" */
<INITIAL>"/#" BEGIN COMMENT; /* BNFC: block comment "/#" "#/" */
<COMMENT>"#/" BEGIN INITIAL;
<COMMENT>.    /* skip */;
<COMMENT>[\n] /* skip */;

<INITIAL>{DIGIT}+"."{DIGIT}+("e"(\-)?{DIGIT}+)?      	 yylval->_double = atof(yytext); return _DOUBLE_;
<INITIAL>{DIGIT}+      	 yylval->_int = atoi(yytext); return _INTEGER_;
<INITIAL>{LETTER}{IDENT}*      	 yylval->_string = strdup(yytext); return _IDENT_;
<INITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<INITIAL>.      	 return _ERROR_;

%%  /* Initialization code. */

yyscan_t initialize_lexer(FILE *inp)
{
  yyscan_t scanner;
  if (yylex_init_extra(NULL, &scanner)) return 0;
  if (inp) yyrestart(inp, scanner);
  return scanner;
}

