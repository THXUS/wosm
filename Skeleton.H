/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef SKELETON_HEADER
#define SKELETON_HEADER
/* You might want to change the above name. */

#include "Absyn.H"


class Skeleton : public Visitor
{
public:
  void visitPROGRAM(PROGRAM *p);
  void visitVARDECL(VARDECL *p);
  void visitVAR(VAR *p);
  void visitTYPE(TYPE *p);
  void visitPOINTER(POINTER *p);
  void visitAST(AST *p);
  void visitCONSTDECL(CONSTDECL *p);
  void visitCONST(CONST *p);
  void visitVALUE(VALUE *p);
  void visitFUNCDECL(FUNCDECL *p);
  void visitFUNCTION(FUNCTION *p);
  void visitRETURN(RETURN *p);
  void visitPARAM(PARAM *p);
  void visitBLOCKPROG(BLOCKPROG *p);
  void visitCMD(CMD *p);
  void visitIF(IF *p);
  void visitIFELSE(IFELSE *p);
  void visitWHILE(WHILE *p);
  void visitFOR(FOR *p);
  void visitGOTO(GOTO *p);
  void visitASSIGMENT(ASSIGMENT *p);
  void visitINCREMENT(INCREMENT *p);
  void visitCOND(COND *p);
  void visitLOGICOP(LOGICOP *p);
  void visitLOGICEXP(LOGICEXP *p);
  void visitEXP(EXP *p);
  void visitARITOP(ARITOP *p);
  void visitARITEXP(ARITEXP *p);
  void visitProgram(Program *p);
  void visitVDecl(VDecl *p);
  void visitVDeclVoid(VDeclVoid *p);
  void visitVar(Var *p);
  void visitVarAssig(VarAssig *p);
  void visitVarV(VarV *p);
  void visitVarAssigV(VarAssigV *p);
  void visitTYPE_int(TYPE_int *p);
  void visitTYPE_double(TYPE_double *p);
  void visitTYPE_char(TYPE_char *p);
  void visitTYPEPOINTER(TYPEPOINTER *p);
  void visitPointerInt(PointerInt *p);
  void visitPointerDouble(PointerDouble *p);
  void visitPointerChar(PointerChar *p);
  void visitAst(Ast *p);
  void visitCDecl(CDecl *p);
  void visitCDeclVoid(CDeclVoid *p);
  void visitConst(Const *p);
  void visitVALUEInteger(VALUEInteger *p);
  void visitVALUEDouble(VALUEDouble *p);
  void visitVALUEEXP(VALUEEXP *p);
  void visitFDecl(FDecl *p);
  void visitFDeclVoid(FDeclVoid *p);
  void visitFunction(Function *p);
  void visitFunctionP(FunctionP *p);
  void visitRETURN_int(RETURN_int *p);
  void visitRETURN_double(RETURN_double *p);
  void visitRETURN_char(RETURN_char *p);
  void visitRETURN_void(RETURN_void *p);
  void visitParam(Param *p);
  void visitBlockProg(BlockProg *p);
  void visitCMDIF(CMDIF *p);
  void visitCMDIFELSE(CMDIFELSE *p);
  void visitCMDWHILE(CMDWHILE *p);
  void visitCMDFOR(CMDFOR *p);
  void visitCMDGOTO(CMDGOTO *p);
  void visitCMDASSIGMENT(CMDASSIGMENT *p);
  void visitIf(If *p);
  void visitIfElse(IfElse *p);
  void visitWhile(While *p);
  void visitFor(For *p);
  void visitGoto(Goto *p);
  void visitAssigment(Assigment *p);
  void visitAssigmentV(AssigmentV *p);
  void visitIncrement(Increment *p);
  void visitIncrementV(IncrementV *p);
  void visitCond(Cond *p);
  void visitLOGICOP1(LOGICOP1 *p);
  void visitLOGICOP2(LOGICOP2 *p);
  void visitLOGICOP3(LOGICOP3 *p);
  void visitLOGICOP4(LOGICOP4 *p);
  void visitLOGICOP5(LOGICOP5 *p);
  void visitLOGICOP6(LOGICOP6 *p);
  void visitLOGICOP7(LOGICOP7 *p);
  void visitLOGICOP8(LOGICOP8 *p);
  void visitLogicExp(LogicExp *p);
  void visitExp(Exp *p);
  void visitARITOP1(ARITOP1 *p);
  void visitARITOP2(ARITOP2 *p);
  void visitARITOP3(ARITOP3 *p);
  void visitARITOP4(ARITOP4 *p);
  void visitAritExp(AritExp *p);
  void visitListVAR(ListVAR *p);
  void visitListAST(ListAST *p);
  void visitListCONST(ListCONST *p);
  void visitListFUNCTION(ListFUNCTION *p);
  void visitListPARAM(ListPARAM *p);
  void visitListCMD(ListCMD *p);
  void visitListLOGICEXP(ListLOGICEXP *p);
  void visitListARITEXP(ListARITEXP *p);

  void visitInteger(Integer x);
  void visitChar(Char x);
  void visitDouble(Double x);
  void visitString(String x);
  void visitIdent(Ident x);

};


#endif
